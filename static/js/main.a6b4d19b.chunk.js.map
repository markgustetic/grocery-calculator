{"version":3,"sources":["components/Header.js","components/GroceryRow.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Header","Container","maxWidth","Typography","component","variant","align","color","gutterBottom","useStyles","makeStyles","theme","root","flexGrow","flexWrap","paper","textAlign","height","palette","text","secondary","formpaper","display","alignItems","justifyContent","marginTop","closebutton","removeButton","groceryList","name","GroceryRow","props","classes","className","groceries","map","grocery","i","Grid","key","container","spacing","item","xs","Autocomplete","freeSolo","value","groceryName","options","option","onInputChange","e","v","handleGroceryChange","renderInput","params","TextField","type","id","label","margin","fullWidth","price","onChange","handlePriceChange","Paper","FormControl","RadioGroup","row","aria-label","owner","handleOptionChange","FormControlLabel","control","Radio","Fab","onClick","handleRemove","padding","defaultGroceries","Calculator","useState","localGroceries","window","localStorage","getItem","console","log","JSON","parse","setGroceries","useEffect","setItem","stringify","addGroceryRow","totalByPerson","filter","reduce","a","Number","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","format","Button","size","target","replace","startsWith","substring","isNaN","includes","afterDecimal","split","length","index","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a6b4d19b.chunk.js","sourcesContent":["import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\nfunction Header() {\n  return (\n    <div>\n      <Container maxWidth=\"sm\">\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          Grocery Calculator\n        </Typography>\n      </Container>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport Fab from \"@material-ui/core/Fab\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    flexWrap: \"wrap\",\n  },\n  paper: {\n    textAlign: \"center\",\n    height: \"100%\",\n    color: theme.palette.text.secondary,\n  },\n  formpaper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 15,\n    height: 55,\n  },\n  closebutton: {\n    height: 53,\n  },\n  removeButton: {\n    marginTop: 15,\n  },\n}));\n\nconst groceryList = [\n  { name: \"Dog Food\" },\n  { name: \"Cat Food\" },\n  { name: \"Frozen Chicken\" },\n  { name: \"Bottled Water\" },\n  { name: \"Onions\" },\n  { name: \"Chicken Wings\" },\n  { name: \"Chicken Breast\" },\n  { name: \"Steak\" },\n  { name: \"Cheese\" },\n  { name: \"Tortillas\" },\n];\n\nexport default function GroceryRow(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      {props.groceries.map((grocery, i) => {\n        return (\n          <Grid key={i} container spacing={1}>\n            <Grid item xs={3}>\n              <Autocomplete\n                freeSolo\n                className={classes.paper}\n                value={grocery.groceryName}\n                options={groceryList.map((option) => option.name)}\n                onInputChange={(e, v) => props.handleGroceryChange(i, e, v)}\n                renderInput={(params) => (\n                  <TextField\n                    type=\"text\"\n                    id={`${i}-name outlined-basic`}\n                    variant=\"outlined\"\n                    {...params}\n                    label=\"Grocery Name\"\n                    name=\"groceryName\"\n                    margin=\"normal\"\n                  />\n                )}\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <TextField\n                fullWidth\n                className={classes.paper}\n                type=\"text\"\n                id={`${i}-price outlined-basic`}\n                variant=\"outlined\"\n                name=\"price\"\n                margin=\"normal\"\n                label=\"Price\"\n                value={grocery.price}\n                onChange={(e) => props.handlePriceChange(i, e)}\n              />\n            </Grid>\n\n            <Grid item xs={3}>\n              <Paper className={classes.formpaper}>\n                <FormControl margin=\"normal\" component=\"fieldset\">\n                  <RadioGroup\n                    row\n                    aria-label=\"mark\"\n                    value={grocery.owner}\n                    name=\"owner\"\n                    onChange={(e) => props.handleOptionChange(i, e)}\n                  >\n                    <FormControlLabel\n                      value=\"mark\"\n                      control={<Radio />}\n                      label=\"Mark\"\n                    />\n                    <FormControlLabel\n                      value=\"alissa\"\n                      control={<Radio />}\n                      label=\"Alissa\"\n                    />\n                    <FormControlLabel\n                      value=\"split\"\n                      control={<Radio />}\n                      label=\"Split\"\n                    />\n                  </RadioGroup>\n                </FormControl>\n              </Paper>\n            </Grid>\n            <Grid item>\n              <Fab\n                className={classes.removeButton}\n                color=\"secondary\"\n                aria-label=\"remove\"\n                onClick={() => props.handleRemove(i)}\n              >\n                <RemoveIcon />\n              </Fab>\n            </Grid>\n          </Grid>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport GroceryRow from \"./GroceryRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin: 10,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst defaultGroceries = [\n  {\n    groceryName: \"\",\n    price: 0,\n    owner: \"split\",\n  },\n];\n\nfunction Calculator() {\n  const classes = useStyles();\n\n  const [groceries, setGroceries] = useState(() => {\n    const localGroceries = window.localStorage.getItem(\"groceries\");\n\n    console.log(localGroceries);\n\n    return localGroceries !== null\n      ? JSON.parse(localGroceries)\n      : defaultGroceries;\n  });\n\n  useEffect(() => {\n    console.log(\"saving\");\n    window.localStorage.setItem(\"groceries\", JSON.stringify(groceries));\n  }, [groceries]);\n\n  const handlePriceChange = (i, e) => {\n    let price = e.target.value.replace(\"$\", \"\");\n\n    if (price.startsWith(\"0\")) {\n      price = price.substring(1);\n    }\n\n    if (isNaN(price)) {\n      return;\n    }\n\n    if (price.includes(\".\")) {\n      let afterDecimal = price.split(\".\");\n      let lastChars = afterDecimal[afterDecimal.length - 1];\n\n      if (lastChars.length > 2) {\n        return;\n      }\n    }\n\n    const value = [...groceries];\n\n    value[i] = {\n      ...groceries[i],\n      [e.target.name]: price,\n    };\n\n    setGroceries(value);\n  };\n\n  const handleGroceryChange = (i, e, v) => {\n    if (e === null) {\n      return;\n    }\n\n    const value = [...groceries];\n\n    value[i] = {\n      ...groceries[i],\n      groceryName: v,\n    };\n\n    setGroceries(value);\n  };\n\n  const handleOptionChange = (i, e) => {\n    setGroceries(\n      groceries.map((item, index) =>\n        i === index ? { ...item, owner: e.target.value } : item\n      )\n    );\n  };\n\n  const handleRemove = (i) =>\n    setGroceries((groceries) => groceries.filter((item, index) => i !== index));\n\n  const addGroceryRow = () =>\n    setGroceries([...groceries, { groceryName: \"\", price: 0, owner: \"split\" }]);\n\n  const resetGroceries = () => setGroceries([]);\n\n  const totalGroceries = () =>\n    groceries.reduce((a, item) => a + Number(item.price), 0);\n\n  const totalByPerson = (name) =>\n    groceries\n      .filter((grocery) => grocery.owner === name || grocery.owner === \"split\")\n      .reduce((a, item) => {\n        return (\n          a +\n          (item.owner === \"split\" ? Number(item.price) / 2 : Number(item.price))\n        );\n      }, 0);\n\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n  });\n\n  return (\n    <div>\n      <div>\n        <Container maxWidth=\"sm\">\n          <Typography\n            component=\"h3\"\n            variant=\"h3\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Total: {formatter.format(totalGroceries())}\n          </Typography>\n        </Container>\n        <Container maxWidth=\"sm\">\n          <Typography\n            component=\"h3\"\n            variant=\"h4\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Mark Total: {formatter.format(totalByPerson(\"mark\"))}\n          </Typography>\n        </Container>\n        <Container maxWidth=\"sm\">\n          <Typography\n            component=\"h3\"\n            variant=\"h4\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Alissa Total: {formatter.format(totalByPerson(\"alissa\"))}\n          </Typography>\n        </Container>\n      </div>\n\n      <div className={classes.root}>\n        <Container>\n          <Grid container spacing={1}>\n            <Grid item xs={2}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                align=\"center\"\n                onClick={() => addGroceryRow()}\n              >\n                Add groceries\n              </Button>\n            </Grid>\n            <Grid item xs={1}>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                size=\"large\"\n                align=\"center\"\n                onClick={() => resetGroceries()}\n              >\n                Reset\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n      <Container>\n        <div className={classes.root}>\n          <Grid container spacing={1}>\n            <GroceryRow\n              groceries={groceries}\n              handleGroceryChange={handleGroceryChange}\n              handlePriceChange={handlePriceChange}\n              handleOptionChange={handleOptionChange}\n              handleRemove={handleRemove}\n            />\n          </Grid>\n        </div>\n        <Fab color=\"primary\" aria-label=\"add\" onClick={() => addGroceryRow()}>\n          <AddIcon />\n        </Fab>\n      </Container>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Calculator from \"./components/Calculator\";\nimport \"typeface-roboto\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}