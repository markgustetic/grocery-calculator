{"version":3,"sources":["components/Header.js","components/GroceryRow.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Header","Container","maxWidth","Typography","component","variant","align","color","gutterBottom","useStyles","makeStyles","theme","root","flexGrow","flexWrap","paper","textAlign","height","palette","text","secondary","formpaper","display","alignItems","justifyContent","marginTop","closebutton","groceryList","name","GroceryRow","props","classes","className","groceries","map","grocery","i","Grid","key","container","spacing","item","xs","Autocomplete","freeSolo","value","options","option","onChange","e","handleInputChange","renderInput","params","TextField","type","id","label","margin","fullWidth","price","handlePriceChange","Paper","FormControl","RadioGroup","row","aria-label","owner","handleOptionChange","FormControlLabel","control","Radio","Button","onClick","handleRemove","padding","Calculator","useState","setGroceries","addGroceryRow","totalByPerson","filter","reduce","a","Number","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","format","size","target","replace","startsWith","substring","isNaN","includes","after_decimal","split","length","index","Fab","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eccfb8f0.chunk.js","sourcesContent":["import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\n\nfunction Header() {\n  return (\n    <div>\n      <Container maxWidth=\"sm\">\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          align=\"center\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          Grocery Calculator\n        </Typography>\n      </Container>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    flexWrap: \"wrap\",\n  },\n  paper: {\n    textAlign: \"center\",\n    height: \"100%\",\n    color: theme.palette.text.secondary,\n  },\n  formpaper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: 15,\n    height: 55,\n  },\n  closebutton: {\n    height: 53,\n  },\n}));\n\nconst groceryList = [\n  { name: \"Dog Food\" },\n  { name: \"Cat Food\" },\n  { name: \"Laundry Detergent\" },\n];\n\nexport default function GroceryRow(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      {props.groceries.map((grocery, i) => {\n        return (\n          <Grid key={i} container spacing={1}>\n            <Grid item xs={3}>\n              <Autocomplete\n                freeSolo\n                //fullWidth\n                className={classes.paper}\n                value={grocery.name}\n                options={groceryList.map((option) => option.name)}\n                onChange={(e) => props.handleInputChange(i, e)}\n                renderInput={(params) => (\n                  <TextField\n                    //  fullWidth\n                    //className={classes.paper}\n                    type=\"text\"\n                    id={`${i}-name outlined-basic`}\n                    variant=\"outlined\"\n                    {...params}\n                    label=\"Grocery Name\"\n                    margin=\"normal\"\n                    onChange={(e) => props.handleInputChange(i, e)}\n                  />\n                )}\n              />\n            </Grid>\n            <Grid item xs={3}>\n              <TextField\n                fullWidth\n                className={classes.paper}\n                type=\"text\"\n                id={`${i}-price outlined-basic`}\n                variant=\"outlined\"\n                name=\"price\"\n                margin=\"normal\"\n                value={grocery.price}\n                onChange={(e) => props.handlePriceChange(i, e)}\n              />\n            </Grid>\n\n            <Grid item xs={3}>\n              <Paper className={classes.formpaper}>\n                <FormControl margin=\"normal\" component=\"fieldset\">\n                  <RadioGroup\n                    row\n                    aria-label=\"mark\"\n                    value={grocery.owner}\n                    onChange={(e) => props.handleOptionChange(i, e)}\n                  >\n                    <FormControlLabel\n                      value=\"mark\"\n                      control={<Radio />}\n                      label=\"Mark\"\n                    />\n                    <FormControlLabel\n                      value=\"alissa\"\n                      control={<Radio />}\n                      label=\"Alissa\"\n                    />\n                    <FormControlLabel\n                      value=\"split\"\n                      control={<Radio />}\n                      label=\"Split\"\n                    />\n                  </RadioGroup>\n                </FormControl>\n              </Paper>\n            </Grid>\n\n            <Grid item>\n              <Paper className={classes.formpaper}>\n                <Button\n                  className={classes.closebutton}\n                  type=\"button\"\n                  onClick={() => props.handleRemove(i)}\n                >\n                  X\n                </Button>\n              </Paper>\n            </Grid>\n          </Grid>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport GroceryRow from \"./GroceryRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    margin: 10,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction Calculator() {\n  const classes = useStyles();\n\n  const [groceries, setGroceries] = useState([\n    {\n      name: \"Dog Food\",\n      price: 10.15,\n      owner: \"mark\",\n    },\n    {\n      name: \"Cat Food\",\n      price: 11.5,\n      owner: \"alissa\",\n    },\n    {\n      name: \"TV\",\n      price: 50.5,\n      owner: \"split\",\n    },\n  ]);\n\n  const handlePriceChange = (i, e) => {\n    let price = e.target.value.replace(\"$\", \"\");\n\n    if (price.startsWith(\"0\")) {\n      price = price.substring(1);\n    }\n\n    if (isNaN(price)) {\n      return;\n    }\n\n    if (price.includes(\".\")) {\n      let after_decimal = price.split(\".\");\n      let last_chars = after_decimal[after_decimal.length - 1];\n\n      if (last_chars.length > 2) {\n        return;\n      }\n    }\n\n    const value = [...groceries];\n\n    value[i] = {\n      ...groceries[i],\n      [e.target.name]: price,\n    };\n\n    setGroceries(value);\n  };\n\n  const handleInputChange = (i, e) => {\n    const value = [...groceries];\n\n    value[i] = {\n      ...groceries[i],\n      [e.target.name]: e.target.value,\n    };\n\n    setGroceries(value);\n  };\n\n  const handleOptionChange = (i, e) => {\n    setGroceries(\n      groceries.map((item, index) =>\n        i === index ? { ...item, owner: e.target.value } : item\n      )\n    );\n  };\n\n  const handleRemove = (i) =>\n    setGroceries((groceries) => groceries.filter((item, index) => i !== index));\n\n  const addGroceryRow = () =>\n    setGroceries([...groceries, { name: \"\", price: 0, owner: \"split\" }]);\n\n  const resetGroceries = () => setGroceries([]);\n\n  const totalGroceries = () =>\n    groceries.reduce((a, item) => a + Number(item.price), 0);\n\n  const totalByPerson = (name) =>\n    groceries\n      .filter((grocery) => grocery.owner === name || grocery.owner === \"split\")\n      .reduce((a, item) => {\n        return (\n          a +\n          (item.owner === \"split\" ? Number(item.price) / 2 : Number(item.price))\n        );\n      }, 0);\n\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 2,\n  });\n\n  return (\n    <div>\n      <div>\n        <Container maxWidth=\"sm\">\n          <Typography\n            component=\"h3\"\n            variant=\"h3\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Total: {formatter.format(totalGroceries())}\n          </Typography>\n        </Container>\n        <Container maxWidth=\"sm\">\n          <Typography\n            component=\"h3\"\n            variant=\"h4\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Mark Total: {formatter.format(totalByPerson(\"mark\"))}\n          </Typography>\n        </Container>\n        <Container maxWidth=\"sm\">\n          <Typography\n            component=\"h3\"\n            variant=\"h4\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Alissa Total: {formatter.format(totalByPerson(\"alissa\"))}\n          </Typography>\n        </Container>\n      </div>\n\n      <div>\n        <Container>\n          <Grid container spacing={1}>\n            <Grid item xs={2}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                align=\"center\"\n                onClick={() => addGroceryRow()}\n              >\n                Add groceries\n              </Button>\n            </Grid>\n            <Grid item xs={1}>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                size=\"large\"\n                align=\"center\"\n                onClick={() => resetGroceries()}\n              >\n                Reset\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n      <Container>\n        <div className={classes.root}>\n          <Grid container spacing={1}>\n            <Grid item xs={3}>\n              <Paper className={classes.paper}>Grocery Name</Paper>\n            </Grid>\n            <Grid item xs={3}>\n              <Paper className={classes.paper}>Price</Paper>\n            </Grid>\n            <Grid item xs={3}>\n              <Paper className={classes.paper}>Owner</Paper>\n            </Grid>\n\n            <GroceryRow\n              groceries={groceries}\n              handleInputChange={handleInputChange}\n              handlePriceChange={handlePriceChange}\n              handleOptionChange={handleOptionChange}\n              handleRemove={handleRemove}\n            />\n          </Grid>\n        </div>\n        <Fab color=\"primary\" aria-label=\"add\">\n          <AddIcon onClick={() => addGroceryRow()} />\n        </Fab>\n      </Container>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Calculator from \"./components/Calculator\";\nimport \"typeface-roboto\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}